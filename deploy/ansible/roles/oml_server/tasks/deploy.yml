---
#----------------------------------------------------------------------
# Directorios básicos
#----------------------------------------------------------------------

# Se crea la llave publica y privada del usuario omnileads #https://docs.ansible.com/ansible/2.5/modules/user_module.html
- name: Create {{ usuario }} user and public key
  user: name={{ usuario }} generate_ssh_key=yes group={{ usuario }} ssh_key_bits=2048 state=present shell=/bin/bash
  become: true
  become_method: sudo

# Se crean los directorios basicos
- name: Create the required directories
  file: "dest={{ item }} state=directory owner={{ usuario }} group={{ usuario }} mode=0755 recurse=yes"
  with_items:
      # Directorio padre, home del usuario omnileads
          - "{{ install_prefix }}"
      # Directorio que contiene configuracion de pip
          - "{{ install_prefix }}.pip"
      # Directorio que contiene la api de SMS para gw's Dinstar
          - "{{ install_prefix }}apidinstar"
      # Directorio donde está almacenado el codigo python
          - "{{ install_prefix }}ominicontacto"
      # Directorio donde se guarda el archivo de settings de django
          - "{{ install_prefix }}local"
      # Directorio donde se crean los json para hablar con la api de wombat
          - "{{ install_prefix }}wombat-json"
      # Directorio que guarda scripts de bash y de inicio del sericio omnileads
          - "{{ install_prefix }}bin"
      # Directorio donde se guardan los backsup que se hacen
          - "{{ install_prefix }}backup"
      # Donde se guardn los certificados de nginx
          - "{{ install_prefix }}nginx_certs"
      # Donde se guardan los csv de los reportes
          - "{{ install_prefix }}media_root/reporte_campana"
      # Donde se guarda el codigo JS y CSS luego de hace un python manage.py collectstatic
          - "{{ install_prefix }}static"
      # Donde se guardan los logs uwsgi.log y django.log
          - "{{ install_prefix }}log"
      # Donde se guardan archivos y mensajes de SMS
          - /var/spool/dwgp/incoming/
          - /var/spool/dwgp/send/
          - /var/spool/dwgp/ussd_incoming/
          - /var/spool/dwgp/ussd_send
  when: desarrollo == 0

# Crea directorios de dumps de Base de datos, esto es algo de ICS
- name: Create directories for DB dumps
  file: "path={{item}} state=directory owner={{ usuario }} group=postgres mode=0770"
  with_items:
    - "{{ install_prefix }}dumps_bd_contacto"
  tags:
    - deploy
    - docker

#----------------------------------------------------------------------
# pip / virtualenv
#----------------------------------------------------------------------

# Opcion para agregar al pip
- name: Setup pip
  ini_file: >
    dest={{ install_prefix }}.pip/pip.conf
    section=install
    option='download-cache'
    value='{{ install_prefix }}.pip/cache'

# El codigo que está en /var/tmp/ominicontacto_build/ se pasa a /opt/omnileeads/ominicontacto
- name: Upload built (rsync to /ominicontacto)
  synchronize: "src={{ build_dir }} dest={{ install_prefix }} delete=yes checksum=yes times=no"
  when: desarrollo == 0

# Esta tarea no está funcionando bien lo que quería hacer es para las maquinas de desarrollo, en vez de copiar el codigo clonar el repo
# -- FIX ME --
- name: Clone of OML repository
  git: repo=git@bitbucket.org:omnileadsdesarrollo/ominicontacto.git dest={{ install_prefix }}ominicontacto/ accept_hostkey=yes
  when: desarrollo == 1
  ignore_errors: yes

- name: Checkout of desired branch
  git: repo=git@bitbucket.org:omnileadsdesarrollo/ominicontacto.git clone=no version={{ rama }} dest={{ install_prefix }}ominicontacto
  when: desarrollo == 1

# Seteo posesion de ominicontacto al usuario omnileads
- name: Change owner and group of ominicontacto
  file: "path={{ install_prefix }}ominicontacto owner={{ usuario }} group={{ usuario }} recurse=yes"

# Se hace el upgrade de python setuptools usando pip. https://docs.ansible.com/ansible/2.5/modules/pip_module.html#pip-module
# El environment sirve para setear variables de entorno necesarias
- name: Upgrade of python setuptools
  pip:
    name=setuptools
    virtualenv={{ install_prefix }}virtualenv
    virtualenv_command=/usr/bin/virtualenv
    extra_args=--upgrade
  environment:
    PATH: "{{ install_prefix }}virtualenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/pgsql-9.6/bin"
    PYTHONPATH: '{{ install_prefix }}ominicontacto:{{ install_prefix }}local'
  become: true
  become_method: su
  become_user: "{{ usuario }}"

# Se instalan los paquetes que hay en el requirements.txt usando pip
- name: Setup virtualenv
  pip:
    requirements={{ install_prefix }}ominicontacto/requirements.txt
    virtualenv={{ install_prefix }}virtualenv
    virtualenv_command=/usr/bin/virtualenv
  environment:
      #PATH: /usr/pgsql-9.6/bin/:{{ lookup('env', 'PATH') }}:{{ install_prefix }}ominicontacto/virtualenv/bin
      PATH: "{{ install_prefix }}virtualenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/usr/pgsql-9.6/bin"
      PYTHONPATH: '{{ install_prefix }}ominicontacto:{{ install_prefix }}local'
  become: true
  become_method: su
  become_user: "{{ usuario }}"
- meta: clear_host_errors

#----------------------------------------------------------------------
# StarPy
#----------------------------------------------------------------------

# Chequeo de si starpy está instalado
- name: Check - StarPy instalado
  shell: find {{ install_prefix }}virtualenv -name starpy | grep -q starpy
  register: starpy_installed
  ignore_errors: True
  tags:
    - virtualenv
    - docker

# Instalo starpy, una API de python para interactuar con AGI y AMI
- name: Install starpy
  pip: name={{ STARPY_PIP_URL }} virtualenv={{ install_prefix }}virtualenv
  when: starpy_installed|failed
  tags:
    - virtualenv
    - docker

#----------------------------------------------------------------------
# Upload of oml_settings_local.py
#----------------------------------------------------------------------

# Se sube el archivo oml_settings_local.py
- name: Upload oml_settings_local.py
  template: src=templates/oml_settings_local.py.j2 dest={{ install_prefix }}local/oml_settings_local.py

# Se hace el link simbolico del archivo oml_settings_local a ominicontacto/, para que se pueda hacer manage.py
- name: Creation of simbolic link of oml_settings_local.py
  file: state=link src={{ install_prefix }}local/oml_settings_local.py dest={{ install_prefix }}ominicontacto/oml_settings_local.py owner={{ usuario }} force=true

#----------------------------------------------------------------------
# Upload of ics_settings_local.py
#----------------------------------------------------------------------

# Se hace upload de los settings de ics
- name: Upload ics_settings_local.py
  template: src=ics_settings_local.py dest={{ install_prefix }}local
  tags:
    - deploy
    - quick_deploy
    - update_settings
    - docker

# Crea el archivo ics_settings_local_customizations.py
- name: Create ics_settings_local_customizations.py if doesnt exists
  file: >
    state=touch
    dest={{ install_prefix}}local/ics_settings_local_customizations.py
  tags:
    - deploy
    - quick_deploy
    - update_settings
    - docker

# Linkeo el settings de ics a la carpeta ominicontacto
- name: Creation of simbolic link of ics_settings_local.py
  file: state=link src={{ install_prefix }}local/ics_settings_local.py dest={{ install_prefix }}ominicontacto/ics_settings_local.py owner={{ usuario }} force=true
  when: ansible_os_family == "Sangoma" or ansible_os_family == "RedHat"
