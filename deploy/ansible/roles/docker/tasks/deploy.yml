---

# Para prodenv el usuario que va a poseer el directorio raiz del proyecto será omnileads
- name: Set system user omnileads
  set_fact: usuario="omnileads"
  when: prodenv == 1

# Incluyo las tasks de configuraciones iniciales de SO para prodenv
- include: roles/prerequisitos/tasks/os_configuration.yml
  when: prodenv == 1 and ansible_os_family == "RedHat" or ansible_os_family == "Sangoma"

# Chequeo si docker está instalado
- name: Check if docker is installed
  shell: which docker
  register: docker_installed
  changed_when: false
  failed_when: false

- debug: msg="Docker wasn't found on system, install it following these steps:https://docs.docker.com/get-docker/"
  when: '"docker" not in docker_installed.stdout'

# Chequeo si docker-compose está instalado
- name: Check if docker-compose is installed
  shell: which docker-compose
  register: docker_compose_installed
  changed_when: false
  failed_when: false

# Si docker no está instalado lo instalo
- name: Adding docker repository
  command: yum-config-manager -y --add-repo {{ docker_repository_url }}
  when: '"docker" not in docker_installed.stdout and prodenv == 1'

- name: Installing docker
  yum: name={{ item }} state=present update_cache=yes
  with_items:
    - yum-utils
    - device-mapper-persistent-data
    - lvm2
    - docker-ce
    - docker-ce-cli
    - containerd.io
  when: '"docker" not in docker_installed.stdout and prodenv == 1'
  retries: 3
  delay: 3
  register: result
  until: result is success

# Si docker-compose no está instalado lo instalo
- name: Installing docker-compose
  shell: |
    curl -m 3000 -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
  when: "'docker-compose' not in docker_compose_installed.stdout and prodenv == 1"
  retries: 3
  delay: 3
  register: result
  until: result is success

#################
# DevEnv deploy #
#################

# Se crea la estructura de los archivos para el deploy del devenv
- name: Creation of deploy folders structure
  file: "dest={{ item }} state=directory owner={{ usuario }} group={{ usuario }} mode=0755 recurse=yes"
  with_items:
    - "{{ ast_conf_location }}"
    - "{{ ast_agis_location }}"
    - "{{ nginx_location }}/conf.d"
    - "{{ ast_other_location }}"
    - "{{ omniapp_location }}"
    - "{{ efk_location }}"
  when: devenv == 1

# Incluyo la tarea de configuracion de asterisk para que me añada los archivos de asterisk que necesita el devenv
- name: Creation of asterisk deploy content
  include: roles/asterisk/tasks/configuration.yml
  when: devenv == 1

# Incluyo el folder de los certificados autofirmados
- name: Copy certificate and key pair
  copy: src=/var/tmp/ansible/roles/docker/files/certs dest={{ deploy_location }}

# Genero los scripts y archivos de configuracion que necesitan los containers
- name: Generate scripts and configuration files of some services
  template: src=roles/{{ item.src }} dest={{ item.dest }} mode=755 owner={{ usuario }} group={{ usuario }}
  with_items:
    - { src: docker/files/scripts/run_asterisk.sh, dest: "{{ ast_other_location }}/run_asterisk.sh"}
    - { src: docker/files/scripts/run_omniapp.sh, dest: "{{ omniapp_location }}/run_omniapp.sh"}
    - { src: omniapp_second/templates/bin/conversor.sh, dest: "{{ omniapp_location}}/conversor.sh" }
    - { src: omniapp_second/templates/etc/ominicontacto.conf, dest: "{{ nginx_location }}/conf.d"}
    - { src: omniapp_second/templates/etc/nginx.conf.j2, dest: "{{ nginx_location }}/nginx.conf"}
    - { src: docker/files/scripts/mime.types, dest: "{{ nginx_location }}/mime.types"}
  when: devenv == 1

#- name: Generate EFK docker-compose file and configuration files
#  template: src=roles/docker/files/efk_infra/{{ item.src }} dest={{ item.dest }} mode=755 owner={{ usuario }} group={{ usuario }}
#  with_items:
#    - { src: kibana.conf, dest: "{{ efk_location }}/kibana.conf"}
#    - { src: fluent.conf, dest: "{{ efk_location }}/fluent.conf"}
#    - { src: logging_stack.yml, dest: "{{ deploy_location }}"}
#  when: devenv == 1

##################
# ProdEnv deploy #
##################

# Se crea el directorio raiz del proyecto
- name: Creation of deploy base folder
  file: "dest={{ deploy_location }} state=directory owner={{ usuario }} group={{ usuario }} mode=0755 recurse=yes"
  when: prodenv == 1

# Inclyo tareas de instalacion y configuracion de wombat dialer solo para docker PE sobre CentOS
- include: roles/dialer/tasks/mariadb.yml
  when: prodenv == 1 and docker_distribution.stdout == '"CentOS Linux"'

# TODO: está harcodeado el usuario wombat que es el que viene por defecto, estaria bueno poder ingresar un usuario/pass para esto desde el inventory
# Esta tarea es necesaria para que el usuario wombat, que es el usuario por defecto que va a poseer la db de wombat pueda acceder desde cualquier IP.
- name: Grant privileges to root and wombat mysql users
  command: "mysql -ne \"GRANT ALL PRIVILEGES ON *.* TO '{{ item.user }}'@'%' IDENTIFIED BY '{{ item.password }}' WITH GRANT OPTION;\""
  with_items:
    - { user: "root", password: "{{ mysql_root_password }}" }
    - { user: "wombat", password: "dials" }
  environment:
    mariadb_host: "{{ mariadb_host }}"
    MYSQL_PWD: "{{ mysql_root_password}}"
  when: prodenv == 1

# Añado las tareas de instalación de postgresql
- include: roles/database/tasks/installations.yml
  when: prodenv == 1

# Añado las tareas de configuración de postgresql
- include: roles/database/tasks/configurations.yml
  when: prodenv == 1

# Añado tareas de instalacion de rtpengine
- include: roles/kamailio/tasks/rtpengine.yml
  when: prodenv == 1

################################
# Tareas para devenv y prodenv #
################################

- name: Link /etc/environment file to .env file in {{ deploy_location }}
  file: state=link src=/etc/environment dest={{ deploy_location }}/.env force=true owner={{ usuario }} group={{ usuario }}

  # Se generan el archivo docker-compose, en los templates se renderizan diferentes cosas dependiendo de si es prodenv o devenv
- name: Generate docker-compose file
  template: src=files/docker_compose_files/docker-compose.yml dest={{ deploy_location }}/docker-compose.yml mode=755 owner={{ usuario }} group={{ usuario }}

# Se crea el archivo kamailio-local, Este archivo contiene las variables que usa el kamailio.cfg
- name: Creation of kamailio-local.cfg file (devenv)
  template: src=roles/kamailio/templates/etc/kamailio-local.cfg dest={{ repo_location }}/ominicontacto_voip/kamailio-files/ owner={{ usuario }} group={{ usuario }}
  when: devenv == 1

# Se crea el archivo kamailio-local, Este archivo contiene las variables que usa el kamailio.cfg
- name: Creation of kamailio-local.cfg file (prodenv)
  template: src=roles/kamailio/templates/etc/kamailio-local.cfg dest={{ deploy_location }} owner={{ usuario }} group={{ usuario }}
  when: prodenv == 1

# Genero el archivo odbc.ini y oml_res_odbc.conf
- name: Creation of odbc.ini and oml_res_odbc.conf file (prodenv)
  template: src=roles/asterisk/templates/etc/odbc.ini dest={{ deploy_location }} owner={{ usuario }} group={{ usuario }}
  with_items:
    - odbc.ini
    - oml_res_odbc.conf
  when: prodenv == 1

# Creo el script de systemd para levantar y tumbar el entorno con un servicio
- name: Create omnileads-{{ customer }} systemd service
  template: src=files/systemd/omnileads.service mode=644 dest=/etc/systemd/system/omnileads-{{ customer }}.service

# Habilito el servicio para devenv
- name: Enable omnileads-{{ customer }} service
  systemd: name=omnileads-{{ customer }} enabled=yes daemon_reload=yes
  when: devenv == 1

# Creo el script postinstall.sh que incluyen tareas que se hacen luego de levantar los containers
- name: Creation of postinstall script (prodenv)
  template: src=files/scripts/postinstall.sh dest={{ deploy_location }} owner={{ usuario }} group={{ usuario }} variable_start_string="[[" variable_end_string="]]"
  when: prodenv == 1

# Habilito e inicio el servicio omnileads-prodenv para prodenv
- name: Start and enable docker and omnileads-{{ customer }} services
  systemd: name={{ item }} state=restarted enabled=yes
  with_items:
    - docker
    - "omnileads-{{ customer }}"
  when: prodenv == 1
