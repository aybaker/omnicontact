---

#----------------------------------------------------------------------
# Deploy de la app
#
# Tags mas utiles:
#  - virtualenv: setup de virtualenv & requirements
#  - deploy: deploy de la APP (EXCEPTUANDO cambios en otros
#       compoenentes, como Nginx)
#  - quick_deploy: deploy rapido de la APP (se saltea varios pasos)
#----------------------------------------------------------------------

#----------------------------------------------------------------------
# Setup general, SO, packages, nginx, NTP, etc
#----------------------------------------------------------------------

- name: Check target server
  fail: msg="Target server isn't supported"
  when: >
    lookup("env","DO_CHECKS") != "no" and (
    ansible_distribution != "CentOS" or
    ansible_distribution_major_version|int != 6 )
  tags:
    - checks

- name: Setup sudoers.d/ftsender 
  template: >
    src=etc/sudoers.d/ftsender
    dest=/etc/sudoers.d/ftsender
    owner=root group=root mode=0440
  sudo: yes
  tags:
    - sudo

- name: Check - RPM de EPEL 6 
  command: test -f /etc/yum.repos.d/epel.repo
  register: epel_installed
  ignore_errors: True
  tags:
    - yum

- name: Check - RPM de PostgreSql 9.3 
  command: test -f /etc/yum.repos.d/pgdg-93-centos.repo
  register: repo_pg_installed
  ignore_errors: True
  tags:
    - yum

- name: Instala RPM de EPEL 6
  when: epel_installed|failed
  sudo: yes
  yum: name={{ RPM_REPO_EPEL }} state=present
  tags:
    - yum

- name: Instala RPM de PostgreSql 9.3
  when: repo_pg_installed|failed
  sudo: yes
  yum: name={{ RPM_REPO_POSTGRESQL }} state=present
  tags:
    - yum

- name: Install Development tools
  sudo: yes
  yum: name="@Development tools" state=present
  tags:
    - yum

- name: Install basic packages
  sudo: yes
  yum: name={{item}} state=installed
  with_items:
    - libselinux-python
    - python-psycopg2
    - python-virtualenv
    - rsync
    - libxslt-devel
    - python-devel
    - ntp
    - ntpdate
  tags:
    - yum

- name: Install packages for required services
  sudo: yes
  yum: name={{item}} state=installed
  with_items:
    - postgresql93
    - postgresql93-contrib
    - postgresql93-server
    - postgresql93-devel
    - nginx
    - munin
    - munin-node
    - redis
    - sox
  tags:
    - yum

- name: Install packages for buliding Asterisk
  sudo: yes
  yum: name={{item}} state=installed
  with_items:
    - make
    - wget
    - openssl-devel
    - ncurses-devel
    - newt-devel
    - libxml2-devel
    - kernel-devel
    - gcc
    - gcc-c++
    - sqlite-devel
    - libuuid-devel
  tags:
    - asterisk
    - yum

- name: Check timezone
  command: diff -q /etc/localtime {{os_timezone}}
  register: clock_synchronized
  ignore_errors: True
  tags:
    - ntp
    - ntp_check

- name: Report timezone errors
  fail: msg="The server has an invalid TIMEZONE - Check {{os_timezone}}"
  when: clock_synchronized|failed
  tags:
    - ntp
    - ntp_check

- name: Start ntp and enable at boot
  sudo: yes
  service: name=ntpd enabled=yes state=started
  tags:
    - ntp

- name: Enable ntpdate
  sudo: yes
  service: name=ntpdate enabled=yes
  tags:
    - ntp

- name: Start Nginx and enable at boot
  sudo: yes
  service: name=nginx enabled=yes state=started
  tags:
    - nginx

- name: Configure Nginx
  sudo: yes
  template: >
    src=etc/nginx/conf.d/ftsender.conf
    dest=/etc/nginx/conf.d/ftsender.conf
    owner=root group=root mode=0644
  tags:
    - nginx

#----------------------------------------------------------------------
# Asterisk
#----------------------------------------------------------------------

- name: Check if Asterisk is installed 
  command: test -f /opt/asterisk-11/sbin/asterisk
  register: asterisk_installed
  ignore_errors: True
  tags:
    - asterisk

- name: Upload Asterisk init script
  template: >
    src=etc/init.d/asterisk-11-ftsender
    dest=/etc/init.d/asterisk-11-ftsender
    owner=root group=root mode=0755
  sudo: yes
  tags:
    - asterisk

- name: Register Asterisk service
  service: name=asterisk-11-ftsender enabled=yes
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

#
# Modifica archivos de Asterisk
#

- name: Modify Asterisk extensions.conf
  lineinfile: >
    state=present
    dest=/opt/asterisk-11/etc/asterisk/extensions.conf
    regexp="^#include\s+{{dj_sett_FTS_DIALPLAN_FILENAME}}\s*"
    insertafter=EOF
    line="#include {{dj_sett_FTS_DIALPLAN_FILENAME}}"
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk manager.conf - general/enabled/yes
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/manager.conf
    section=general
    option=enabled
    value=yes
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk manager.conf - general/webenabled/yes
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/manager.conf
    section=general
    option=webenabled
    value=yes
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk manager.conf - manager/user/secret
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/manager.conf
    section={{ dj_sett_ASTERISK_USERNAME }}
    option=secret
    value={{ dj_sett_ASTERISK_PASSWORD }}
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk manager.conf - manager/user/read
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/manager.conf
    section={{ dj_sett_ASTERISK_USERNAME }}
    option=read
    value=system,call,log,verbose,command,agent,user,originate
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk manager.conf - manager/user/write
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/manager.conf
    section={{ dj_sett_ASTERISK_USERNAME }}
    option=write
    value=system,call,log,verbose,command,agent,user,originate
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk http.conf - general/enabled/yes
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/http.conf
    section=general
    option=enabled
    value=yes
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk http.conf - general/bindaddr/ASTERISK_AMI_HTTP_BIND
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/http.conf
    section=general
    option=bindaddr
    value={{ ASTERISK_AMI_HTTP_BIND }}
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

- name: Modify Asterisk http.conf - general/bindport/ASTERISK_AMI_HTTP_PORT
  ini_file: >
    dest=/opt/asterisk-11/etc/asterisk/http.conf
    section=general
    option=bindport
    value={{ ASTERISK_AMI_HTTP_PORT }}
  when: asterisk_installed|success
  sudo: yes
  tags:
    - asterisk

#
# Start / reload
#

- name: Start Asterisk (only if installed)
  sudo: yes
  when: asterisk_installed|success
  service: name=asterisk-11-ftsender state=started
  ignore_errors: True
  register: asterisk_started
  tags:
    - asterisk

- name: Reload Asterisk (only if 'start' failed)
  sudo: yes
  when: asterisk_started|failed
  service: name=asterisk-11-ftsender state=reloaded
  ignore_errors: True
  tags:
    - asterisk

#----------------------------------------------------------------------
# BD
#----------------------------------------------------------------------

- name: Initiate database
  sudo: yes
  command: >
    service postgresql-9.3 initdb
    creates=/var/lib/pgsql/9.3/data/postgresql.conf
  tags:
    - db

- name: Start PostgreSQL and enable at boot
  sudo: yes
  service: name=postgresql-9.3 enabled=yes state=started
  tags:
    - db

- name: Copy pg_hba.conf
  sudo: yes
  register: pg_hba_updated
  copy: src=pg_hba.conf dest=/var/lib/pgsql/9.3/data/
  tags:
    - db

- name: Reload PostgreSql
  sudo: yes
  service: name=postgresql-9.3 state=reloaded
  when: pg_hba_updated.changed
  tags:
    - db

- name: Create PostgreSql user
  postgresql_user: name=ftsender password={{db_password}}
  sudo: yes
  sudo_user: postgres
  tags:
    - db

- name: Create PostgreSql database
  postgresql_db: name=ftsender owner=ftsender
  sudo: yes
  sudo_user: postgres
  tags:
    - db

#----------------------------------------------------------------------
# Deploy
#----------------------------------------------------------------------

- name: Create the required directories
  file: path={{item}} state=directory owner=ftsender mode=0755
  sudo: yes
  # /home/ftsender es incluido xq el permiso por default (0700) hace que
  # Nginx NO puda leer archivos estaticos y de media
  # TODO: la seguridad podria mejorarse moviendo statics y media a otro
  #   directorio fuera de /home
  with_items:
    - /etc/ftsender/asterisk
    - /home/ftsender
    - /home/ftsender/.pip
    - /home/ftsender/deploy
    - /home/ftsender/deploy/bin
    - /home/ftsender/deploy/app
    - /home/ftsender/deploy/local
    - /home/ftsender/deploy/media_root
    - /home/ftsender/deploy/static_root
    - /home/ftsender/deploy/log
    - /home/ftsender/deploy/run
  tags:
    - deploy

- name: Setup pip
  ini_file: >
    dest=/home/ftsender/.pip/pip.conf
    section=install
    option='download-cache'
    value='/home/ftsender/.pip/cache'
  tags:
    - virtualenv

- name: Upload built (rsync to /app)
  # Copies xxx/app to /home/ftsender/deploy/app (/app on dest is implicit)
  synchronize: >
    src={{BUILD_DIR}}
    dest=/home/ftsender/deploy
    delete=yes checksum=yes times=no
  tags:
    - deploy
    - quick_deploy

- name: Setup virtualenv
  pip: >
    requirements=/home/ftsender/deploy/app/requirements.txt
    virtualenv=/home/ftsender/deploy/virtualenv
    virtualenv_site_packages=no
  environment:
    PATH: /usr/pgsql-9.3/bin:{{ lookup('env', 'PATH') }}
  tags:
    - virtualenv

- name: Check - StarPy instalado 
  shell: find /home/ftsender/deploy/virtualenv -name starpy | grep -q starpy
  register: starpy_installed
  ignore_errors: True
  tags:
    - virtualenv

- name: Install starpy
  pip: name={{ STARPY_PIP_URL }} virtualenv=/home/ftsender/deploy/virtualenv
  when: starpy_installed|failed
  tags:
    - virtualenv

- name: Upload fts_web_settings_local.py
  template: src=fts_web_settings_local.py dest=/home/ftsender/deploy/local
  tags:
    - deploy
    - quick_deploy
    - update_settings

- name: Run Django syncdb
  django_manage: >
      command=syncdb
      app_path=/home/ftsender/deploy/app
      settings=fts_web.settings
      virtualenv=/home/ftsender/deploy/virtualenv
  environment:
    PYTHONPATH: '/home/ftsender/deploy/app:/home/ftsender/deploy/local'
  tags:
    - deploy

- name: Run Django migrations
  django_manage: >
      command=migrate
      app_path=/home/ftsender/deploy/app
      settings=fts_web.settings
      virtualenv=/home/ftsender/deploy/virtualenv
  environment:
    PYTHONPATH: '/home/ftsender/deploy/app:/home/ftsender/deploy/local'
  tags:
    - deploy
    - quick_deploy

- name: Run Django collectstatic
  django_manage: >
      command=collectstatic
      app_path=/home/ftsender/deploy/app
      settings=fts_web.settings
      virtualenv=/home/ftsender/deploy/virtualenv
  environment:
    PYTHONPATH: '/home/ftsender/deploy/app:/home/ftsender/deploy/local'
  tags:
    - deploy
    - quick_deploy

- name: Upload ftsender_uwsgi.ini
  template: src=ftsender_uwsgi.ini dest=/home/ftsender/deploy/local
  tags:
    - deploy

- name: Upload FTSender init script
  template: >
    src=etc/init.d/ftsender-daemon
    dest=/etc/init.d/ftsender-daemon
    owner=root group=root mode=0755
  sudo: yes
  tags:
    - deploy

- name: Register FTSenser service
  service: name=ftsender-daemon enabled=yes
  sudo: yes
  tags:
    - deploy

- name: Upload scripts to deploy/bin
  template: src={{item}} dest=/home/ftsender/deploy/bin mode=0755
  with_items:
    - run_uwsgi.sh
    - manage.sh
  tags:
    - deploy

- name: Reload FTSenser service
  service: name=ftsender-daemon state=reloaded
  sudo: yes
  tags:
    - deploy
    - quick_deploy
    - update_settings

- name: Run ftsdaemon_checks
  command: /home/ftsender/deploy/bin/manage.sh ftsdaemon_checks
  register: ftsdaemon_checks_output
  tags:
    - deploy
    - quick_deploy
    - update_settings
  ignore_errors: True

- name: Print output of ftsdaemon_checks
  debug: msg="{{ ftsdaemon_checks_output.stdout }}"
  when: ftsdaemon_checks_output|failed
  tags:
    - deploy
    - quick_deploy
    - update_settings
