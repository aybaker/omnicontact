---

#----------------------------------------------------------
#--- Upload and execution of ICS scripts
#----------------------------------------------------------
- name: Upload ICS scripts to deploy/bin
  template: src=bin/{{ item }} dest={{ install_prefix }}bin mode=0755
  with_items:
    - db_update_plpython_stored_proc.sh
    - stop-ftsender-daemons-for-deploy.py
    - start-ftsender-daemons-for-deploy.py
    - upload_etc_rclocal.sh

- name: Stop FTSender services (except FastAGI daemon)
  shell: python -u /home/ftsender/deploy/bin/stop-ftsender-daemons-for-deploy.py 2>&1
  ignore_errors: yes

- name: Install stored procedures
  shell: >
    {{ install_prefix }}bin/db_update_plpython_stored_proc.sh
    {{ install_prefix }}ominicontacto/fts_web/sql/plpython/*.sql
    {{ install_prefix }}ominicontacto/fts_web/sql/plpgsql/update_timestamp.sql

#----------------------------------------------------------------------
# Setup supervisor
#----------------------------------------------------------------------

- name: Upload Supervisor config file
  template: src=templates/supervisord.conf dest=/etc/supervisord.conf
  become: true
  become_method: sudo

- name: Create /var/tmp/supervisor.sock file
  file: path=/var/tmp/supervisor.sock state=touch mode=755
  become: true
  become_method: sudo

- name: Start supervisor service
  service: name=supervisord state=started enabled=yes
  become: true
  become_method: sudo

- name: Reload supervisor service
  shell: supervisorctl reload
  become: true
  become_method: sudo

- name: Flush handlers - reload de supervisor
  meta: flush_handlers
  become: true
  become_method: sudo

#----------------------------------------------------------------------
# Con supervisor configurado, hacemos reload
#----------------------------------------------------------------------

- name: Start FTSender services (except FastAGI daemon)
  shell: "python -u {{ install_prefix }}bin/start-ftsender-daemons-for-deploy.py 2>&1"
  ignore_errors: no

#----------------------------------------------------------------------
# Checks
#----------------------------------------------------------------------

- name: Run ftsdaemon_checks
  shell: "{{ install_prefix }}bin/manage.sh ftsdaemon_checks"
  register: ftsdaemon_checks_output
  ignore_errors: True

- name: Print output of ftsdaemon_checks
  debug: msg="{{ ftsdaemon_checks_output.stdout }}"
  when: ftsdaemon_checks_output|failed

#----------------------------------------------------------------------
# Deploy sms
#----------------------------------------------------------------------

- name: Upload /etc/rc.local
  shell: "{{ install_prefix }}/bin/upload_etc_rclocal.sh"
  tags:
    - deploy
    - quick_deploy
    - update_settings
    - docker
  ignore_errors: True

- name: Upload built (rsync to /apidinstar)
  # Copies xxx/app to /home/ftsender/deploy/apidinstar (/apidinstar on dest is implicit)
  synchronize: >
    src={{ BUILD_API_DINSTAR }}
    dest=/home/ftsender/deploy
    delete=yes checksum=yes times=no
  tags:
    - deploy
    - quick_deploy
    - docker

#- name: Change permissions to directory dinstar
#  shell: chmod -R 777 /home/ftsender/deploy/apidinstar/dinstar/
#  when: ansible_os_family == "RedHat"
#  tags:

#----------------------------------------------------------------------
# Sigo con omnileads
#----------------------------------------------------------------------

- name: Upload nginx.conf configuration
  template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf
  when: ansible_os_family == "Sangoma" or ansible_os_family == "RedHat"
  become: true
  become_method: sudo

- name: Enable nginx
  shell: systemctl enable nginx
  when: ansible_os_family == "Sangoma" or ansible_os_family == "RedHat"
  become: true
  become_method: sudo

- name: Create of ominicontacto.conf
  template: src=templates/ominicontacto.conf.j2 dest=/etc/nginx/conf.d/ominicontacto.conf
  become: true
  become_method: sudo

- name: Copy of the certificates in nginx
  copy: "src={{ install_prefix }}kamailio/etc/certs/{{ item }} dest={{ install_prefix }}nginx_certs/ remote_src=yes"
  with_items:
      - cert.pem
      - key.pem
  become: true
  ignore_errors: yes
  become_method: sudo
  tags: kamailio-cert
  notify: restart nginx

- name: Create of oml_uwgsi.ini script
  template: src=templates/oml_uwsgi.ini.j2 dest={{ install_prefix }}bin/oml_uwsgi.ini mode=755 owner={{ usuario }} group={{ usuario }}

- name: Create ominicontacto-daemon service
  template: src=templates/ominicontacto-daemon.j2 dest=/etc/init.d/ominicontacto-daemon mode=755 owner=root group=root
  become: true
  become_method: sudo

- name: Start the ominicontacto-daemon service
  command: "{{ item }}"
  with_items:
          - yum install '/lib/lsb/init-functions' -y
          - "service ominicontacto-daemon start"
          - "service ominicontacto-daemon stop"
          - "chkconfig ominicontacto-daemon on"
          - "service ominicontacto-daemon start"
  become: true
  become_method: sudo
  ignore_errors: yes
  when: ansible_os_family == "Sangoma" or ansible_os_family == "RedHat"

- name: Create the ominicontacto-daemon service
  shell: "{{ item }}"
  with_items:
          - "update-rc.d ominicontacto-daemon defaults"
          - "update-rc.d ominicontacto-daemon enable 2"
          - "update-rc.d ominicontacto-daemon enable 3"
          - "update-rc.d ominicontacto-daemon enable 4"
          - "update-rc.d ominicontacto-daemon enable 5"
          - "service ominicontacto-daemon start"
  become: true
  become_method: sudo
  ignore_errors: yes
  when: ansible_os_family == "Debian"

- name: Copy of the Kamailio cert in voip.cert
  template: src=templates/concatenate.sh dest={{ install_prefix }}bin/concatenate.sh mode=755
  ignore_errors: yes
  tags: kamailio-cert
  become: true
  become_method: sudo

- shell: "bash concatenate.sh chdir={{ install_prefix }}bin"
  tags: kamailio-cert
  ignore_errors: yes
  become: true
  become_method: sudo

- name: Generate changeip.sh script
  template: src=templates/changeip.sh.j2 dest={{ install_prefix }}bin/changeip.sh owner={{ usuario }} group={{ usuario }} mode=755

- name: Generate manage.sh script
  template: src=templates/manage.sh.j2 dest={{ install_prefix }}bin/manage.sh owner={{ usuario }} group={{ usuario }} mode=755
