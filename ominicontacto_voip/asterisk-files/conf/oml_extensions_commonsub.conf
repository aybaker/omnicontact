; Copyright (C) 2018 Freetech Solutions

; This file is part of OMniLeads

; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.

; You should have received a copy of the GNU General Public License
; along with this program.  If not, see http://www.gnu.org/licenses/.

; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML         COMMON SUBRUTINES       OML OML OML OML OML OML OML OML OML OML
; OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML OML

[sub-oml-queuelog]
; Subrutina para el tratamiento de todos los QueueLogs

; Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},${OMLCALLDURATION},,call))
; ARG1-OMLCAMPID, ARG2-UNIQUEID, ARG3-OMLAGENTID, ARG4-OMLEVENT, ARG5-OMLOUTNUM, ARG6-OMLCODCLI, ARG7-OMLCALLTYPEID
; ARG8-OMLCAMPTYPE, ARG9-OMLWAITCALLDURATION, ARG10-OMLCALLDURATION, ARG11-OMLRECFILENAME, ARG12-TYPEEVENT

; QueueLog(${ARG1}-${ARG8}-${ARG7},${ARG2},${ARG3},${ARG4},${ARG5},${ARG6},${ARG9},${ARG10},${ARG11})

; QueueLog Dialout Event-DIAL, data1-OMLOUTNUM, data2-OMLCODCLI
; QueueLog Dialout Event-ANSWER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION
; QueueLog Dialout Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION, data4-OMLCALLCURARION
; QueueLog Dialout Event-!ANSWER, data1-OMLOUTNUM, data2-OMLCODCLI, data3-OMLWAITCALLDURATION

; QueueLog Queue Dialer Event-ENTERQUEUE, data1-OMLOUTNUM, data2-OMLCODCLI
; QueueLog Queue Dialer Event-CONNECT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-ABANDON, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI
; QueueLog Queue Dialer Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data3-ring duration, data5-OMLCAMPTYPEID, data6-OMLCODCLI

; QueueLog Queue Inbound Event-ENTERQUEUE, data1-OMLOUTNUM, data2-position, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-CONNECT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-COMPLETEOUTNUM|COMPLETEAGENT, data1-OMLOUTNUM, data2-position, data3-ring duration, data4-call duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-ABANDON, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]
; QueueLog Queue Inbound Event-EXPIREWITHTIMEOUT, data1-OMLOUTNUM, data2-position, data3-ring duration, data5-OMLCAMPTYPEID, [data6-OMLCODCLI]

include => sub-oml-queuelog-custom

exten => s,1,Verbose(2, Subrutine for qlog - EVENTTYPE:${ARG10})
same => n,Goto(${ARG12})

same => n(call),Verbose(2, qlog Call: ARG1->OMLCAMPID:${ARG1}, ARG2->UID:${ARG2}, ARG3->OMLAGENTID:${ARG3})
same => n,Verbose(2, qlog Call: ARG4->EVENT:${ARG4}, ARG5->OMLOUTNUM:${ARG5}, ARG6->OMLCODCLI:${ARG6})
same => n,Verbose(2, qlog Call: ARG7->OMLCALLTYPEID:${ARG7}, ARG8->OMLCAMPTYPE:${ARG8}, ARG9->OMLCALLWAITDURATION:${ARG9})
same => n,Verbose(2, qlog Call: ARG10->OMLCALLDURATION:${ARG10}, ARG11->OMLRECFILENAME:${ARG11})

same => n,ExecIf($[${ISNULL(${ARG9})}]?Set(ARG9=0))
same => n,GotoIf($["${ARG3}" != "dialer-dialout"]?while)
same => n,Set(ARG3=)

same => n(while),Set(COUNTER=1)
same => n,While($[${COUNTER} < 12])
same => n,ExecIf($[${ISNULL(${ARG${COUNTER}})}]?Set(ARG${COUNTER}=-1))
same => n,Set(COUNTER=${INC(COUNTER)})
same => n,EndWhile()

same => n,QueueLog(${ARG1}-${ARG8}-${ARG7},${ARG2},${ARG3},${ARG4},${ARG5}|${ARG6}|${ARG9}|${ARG10}|${ARG11})
same => n,Return()

same => n(pause),Verbose(2, qlog Pause: ARG1->UID:${ARG1}, ARG2->OMLAGENTID:${ARG2}, ARG3->OMLPAUSEID:${ARG3})
same => n,QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(unpause),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},${ARG5})
same => n,Return()

same => n(login),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

same => n(logoff),QueueLog(${ARG1},${ARG2},${ARG3},${ARG4},)
same => n,Return()

[sub-oml-dst-switch]
; esta sub recibe como par치metros el tipo de obj a enrutar y el id del mismo
; puede ser invocada por los modulos de inr, outr, ivr, tc, queue, etc.
include => sub-oml-dst-switch-custom

exten => s,1,Verbose(2, "Un viaje de mil millas comienza con el primer paso" - Lao Tse)
same => n,Set(OMLDEST=${ARG1})
same => n,Set(OMLOBJID=${ARG2})
same => n,Gosub(${DB(OML/GLOBALS/OBJ/${OMLDEST})}(${OMLOBJID}))
same => n,Return(FAIL-SWITCH)

[sub-oml-set-chanvars]
; subrutina de setting de OML-CHANVARS. Es invocada en el "nacimiento" de cada canal de OML de manera tal
; que cada canal (dentro de lo posible) cuente con las variables de canal generales de OML
; ARG1 OMLCAMPID | ARG1 OMLAGENTID | ARG1 OMLCODCLI
include => sub-oml-set-chanvars-custom

exten => s,1,Verbose(2, Set OML Channel Vars)
same => n,Goto(${ARG2})

same => n(camp),Set(OMLCAMPQNAME=${DB(OML/CAMP/${ARG1}/QNAME)})
same => n,Set(__OMLCAMPCALLAGENTACTION=${DB(OML/CAMP/${ARG1}/CALLAGENTACTION)})
same => n,Set(__OMLCAMPFAILOVER=${DB(OML/CAMP/${ARG1}/FAILOVER)})
same => n,Set(__OMLCAMPMAXCALLS=${DB(OML/CAMP/${ARG1}/MAXCALLS)})
same => n,Set(__OMLCAMPMAXQCALLS=${DB(OML/CAMP/${ARG1}/MAXQCALLS)})
same => n,Set(__OMLCAMPQUEUETIME=${DB(OML/CAMP/${ARG1}/QUEUETIME)})
same => n,Set(__OMLCAMPREC=${DB(OML/CAMP/${ARG1}/REC)})
same => n,Set(__OMLCAMPRINGTIME=${DB(OML/CAMP/${ARG1}/RINGTIME)})
same => n,Set(__OMLCAMPSL=${DB(OML/CAMP/${ARG1}/SL)})
same => n,Set(__OMLCAMPTYPE=${DB(OML/CAMP/${ARG1}/TYPE)})
same => n,Set(__OMLCAMPOUTR=${DB(OML/CAMP/${ARG1}/OUTR)})
same => n,Set(__OMLCAMPOUTCID=${DB(OML/CAMP/${ARG1}/OUTCID)})
same => n,Return()

same => n(agent),Set(__OMLAGENTSIP=${DB(OML/AGENT/${ARG1}/SIP)})
same => n,Set(__OMLAGENTNAME=${DB(OML/AGENT/${ARG1}/NAME)})
same => n,Set(__OMLAGENTSTATUS=${CUT(DB(OML/AGENT/${ARG1}/STATUS),:,1)})
same => n,Return()

same => n(client),Verbose(2, el futuro es ilusorio)
same => n,Return()


[sub-oml-set-lang]
; set camp or systema lang

include => sub-oml-set-lang-custom

exten => s,1,Verbose(2, "set system language")
same => n,Set(__OMLLANG=${DB(OML/GLOBALS/LANG)})
same => n,Return()

[sub-oml-countdown]
; macro utilizada por bucles con contador

include => sub-oml-countdown-custom

exten => s,1,Verbose(2, Countdown sub for any dialplan loop)
same => n,Verbose(2, intento ${ARG1} de ${ARG2})
same => n,Set(XCOUNT=${INC(ARG1)})
same => n,GotoIf($[${ARG1} <= ${ARG2}]?return)
same => n,Verbose(2,End of the loop)
same => n,Return(0)
same => n(return),Return(${XCOUNT})


[sub-oml-rec-check]
; esta sub comprueba si la campa침a tiene activo la grabacion.
include => sub-oml-rec-check-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - OMLCAMPID:${ARG1} - UNIQUEIDREC:${ARG2})
same => n,GotoIf($["${DB(OML/CAMP/${OMLCAMPID}/REC)}" != "True"]?return)
same => n,Set(__OMLRECTHISCALL=1)
same => n(return),Return()

[sub-oml-rec-filename]
; esta sub arma el OMLRECFILENAME para la llamada y tipo de campa침a.
include => sub-oml-rec-filename-custom

exten => s,1,Verbose(2, Welcome to ${CONTEXT} - UNIQUEIDREC:${ARG1})
same => n,GotoIf($["${ARG1}" != ""]?withUniqueidRec)
same => n,Set(UNIQUEIDREC=${UNIQUEID})
same => n(withUniqueidRec),Set(UNIQUEIDREC=${ARG1})
same => n,Goto(${ARG2})

same => n(manualCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=mc-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()

same => n(dialerCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=dialer-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()

same => n(inboundCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=in-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()

same => n(previewCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=prev-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()

same => n(click2Call),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=click2call-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()

same => n(internalCall),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Set(__OMLRECFILENAME=internal-${STRFTIME(${EPOCH},,%Y%m%d)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEIDREC})
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n,Return()


[sub-oml-amd]
; Subrutina para detecci칩n de contestadores
include => sub-oml-amd-custom

exten => s,1,Verbose(2, AMD subrutine for camp ${ARG1})
same => n,GotoIf($["${DB(OML/CAMP/${OMLCAMPID}/AMD)}" == "True"]?amd)
same => n(amd_human),Return()

same => n(amd),AMD()
same => n,NoOp(AMDSTATUS=${AMDSTATUS})
same => n,GotoIf($["${AMDSTATUS}" == "MACHINE"]?amd_machine:amd_human)

same => n(amd_machine),NoOp(es una maquina)
same => n,Set(__OMLAMD=1)
same => n,UserEvent(CALLSTATUS,Uniqueid:${ARG2},V:CONTESTADOR)
same => n,Playback(${DB(OML/CAMP/${OMLCAMPID}/AMDAUDIO)})
same => n,Playback(${DB(OML/CAMP/${OMLCAMPID}/AMDAUDIO)})
same => n,Gosub(sub-oml-hangup)

[sub-oml-ncalls]
; Subrutina para conteo de llamadas concurrentes
include => sub-oml-ncalls-custom


[sub-oml-hangup]
; Subrutina de ejecuci칩n de hangup
include => sub-oml-hangup-custom

exten => s,1,Verbose(2, Hangup call)
same => n,Verbose(2, Todo fue un fugaz pensamiento en la mente del TODO)
same => n,Verbose(2, ${ARG1})
same => n,Hangup()

; Subrutina para comprobar blacklist (c2c, manual y preview) y blacklist & dialednum (dialer)
[sub-oml-blacklist]
exten => s,1,Verbose(2, OMLOUTNUM: ${ARG1}, OMLCALLTYPEID: ${ARG2}, OMLCAMPID: ${ARG3} )
same => n,GotoIf($[${ARG2} == 2]?dialerCall)
; manual, c2c, preview
same => n(otherCall),AGI(omni-blacklist.py,${ARG1})
same => n,Verbose(2, resultado del blacklist: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Set(BLACKLIST=0)
same => n,Return(0)
; dialer call
same => n(dialerCall),Verbose(2, dialerCall Blacklist & Dialed number)
same => n,Verbose(2, number -${ARG1}- is in the blacklist)
same => n,AGI(omni-blacklist.py,${ARG1})
same => n,Verbose(2, blacklist result: ${BLACKLIST})
same => n,GotoIf($["${BLACKLIST}" == "1"]?blacklist,1)
same => n,Verbose(2, number -${ARG1}- was contacted previsly)
same => n,AGI(omni-dialednum.py,${ARG1},${ARG3})
same => n,Verbose(2, resultado del oml dialednum: ${OMLDIALEDNUM})
same => n,GotoIf($["${OMLDIALEDNUM}" == "1"]?falseanswer,1)
same => n,Return(0)

exten => falseanswer,1,Verbose(2, don't call, but insert a callstatus for WD)
same => n,Set(OMLDIALEDNUM=1)
same => n,Answer()

exten => blacklist,1,Verbose(2, is a blacklist num)
same => n,Set(__DIALSTATUS=BLACKLIST)
same => n,Return(1)


[sub-oml-failover-dst]
exten => s,1,Verbose(2, OMLCAMPID: ${ARG1})
same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/FAILOVER)}" == "1"]?failoverCall)
same => n,Gosub(sub-oml-hangup,s,1)

same => n(failoverCall),Verbose(2, failover es true)
;same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/TYPE)}" == "1" && "${ARG2}" == "dial"]?manualCall)
same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/TYPE)}" == "2" && "${ARG2}" == "queue"]?dialerCall)
same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/TYPE)}" == "3" && "${ARG2}" == "queue"]?inboundCall)
;same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/TYPE)}" == "4" && "${ARG2}" == "dial"]?previewCall)
;same => n,GotoIf($["${DB(OML/CAMP/${ARG1}/TYPE)}" == "5" && "${ARG2}" == "dial"]?icsCall)
same => n,Verbose(2, failolver fail, not calltype for ${ARG1} camp)
same => n,Gosub(sub-oml-hangup,s,1)

;same => n(manualCall),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},,,call))
;same => n,Goto(goFailoverDst)
same => n(dialerCall),Gosub(sub-oml-queuelog,s,1(${ARG1},${OMLUNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${DB(OML/CAMP/${ARG1}/QUEUETIME)},,,call))
same => n,Goto(goFailoverDst)
same => n(inboundCall),Gosub(sub-oml-queuelog,s,1(${ARG1},${OMLUNIQUEID},${OMLAGENTID},EXITWITHTIMEOUT,${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${DB(OML/CAMP/${ARG1}/QUEUETIME)},,,call))
same => n,Goto(goFailoverDst)
;same => n(previewCall),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},,,call))
;same => n,Goto(goFailoverDst)
;same => n(icsCall),Gosub(sub-oml-queuelog,s,1(${OMLCAMPID},${OMLUNIQUEID},${OMLAGENTID},${OMLCALLSTATUS},${OMLOUTNUM},${OMLCODCLI},${OMLCALLTYPEID},${OMLCAMPTYPE},${OMLCALLWAITDURATION},,,call))
;same => n,Goto(goFailoverDst)
same => n(goFailoverDst),Set(__OMLCALLSTATUS=FAILOVER)


; check dst - if dst is an in-camp StopMixMonitor
same => n,GotoIf($["${CUT(DB(OML/CAMP/${ARG1}/FAILOVERDST),\,,1)}" != "1"]?go2Dst)
same => n,StopMixMonitor(${OMLRECFILENAME}.wav)

same => n(go2Dst),Verbose(2, failover class: ${CUT(DB(OML/CAMP/${ARG1}/FAILOVERDST),\,,1)})
same => n,Set(__FAILOVERCLASS=${CUT(DB(OML/CAMP/${ARG1}/FAILOVERDST),\,,1)})
same => n,Set(__OMLFAILOVER=true)
same => n,Set(__QUEUESTATUS=)
same => n,Set(__ABANDONED=)
same => n,Gosub(sub-oml-dst-switch,s,1(${DB(OML/CAMP/${ARG1}/FAILOVERDST)}))
same => n,Gosub(sub-oml-hangup,s,1)


[sub-oml-module-ivrbreakout]
include => sub-oml-module-ivrbreakout-custom

exten => _Z,1,Verbose(2, IVR Break Out ${ARG1})
same => n,GoSub(sub-oml-module-ivr,s,1(${DB(OML/CAMP/${OMLCAMPID}/IVRBREAKOUTID)}))
same => n,Hangup()


[sub-oml-ondemand-record]
exten => s,1,Verbose(2, ondemand call recording)

same => n(ondemand),Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" == "1"]?return)
same => n,Set(__OMLRECFILENAME=ondemand-${OMLCAMPID}-${STRFTIME(${EPOCH},,%Y%m%d%H%M%S)}-${OMLAGENTID}-${OMLOUTNUM}-${UNIQUEID})
same => n,Set(__OMLRECDIR=${STRFTIME(${EPOCH},,%C%y-%m-%d)})
same => n,MixMonitor(${OMLRECDIR}/${OMLRECFILENAME}.wav,b)
same => n,Set(SHARED(OMLRECFILENAME,${OMLMOTHERCHAN})=${OMLRECFILENAME})
same => n(return),Return()

[sub-oml-ondemand-record-stop]
exten => s,1,Verbose(2, ondemand call recording stop)
same => n,Verbose(2, rec the ${OMLCAMPID} call ${OMLOUTNUM})
same => n,Gosub(sub-oml-rec-check,s,1)
same => n,GotoIf($["${OMLRECTHISCALL}" == "1"]?return)
same => n,StopMixMonitor()
same => n(return),Return()
