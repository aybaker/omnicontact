####### Include Local Config If Exists #########
include_file "kamailio-local.cfg"

#!KAMAILIO

#!define WITH_POSTGRES
#!define WITH_AUTH
#!define WITH_USRLOCDB
#!define WITH_NAT
#!define WITH_TLS
#!define WITH_PSTN
#!define WITH_PRESENCE
##!define WITH_XCAPSRV
#!define WITH_ANTIFLOOD
#!define WITH_WEBSOCKET

# - flags
#   FLT_ - per transaction (message) flags
#       FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

#!define WITH_DEBUG

#######################################################################################
# Kamailio (OpenSER) SIP Server v3.1 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Several features can be enabled using '#!define WITH_FEATURE' directives:
#
# *** To run in debug mode:
#     - define WITH_DEBUG
#
# *** To enable mysql:
#     - define WITH_MYSQL
#
# *** To enable authentication execute:
#     - enable mysql
#     - define WITH_AUTH
#     - add users using 'kamctl'
#
# *** To enable IP authentication execute:
#     - enable mysql
#     - enable authentication
#     - define WITH_IPAUTH
#     - add IP addresses with group id '1' to 'address' table
#
# *** To enable persistent user location execute:
#     - enable mysql
#     - define WITH_USRLOCDB
#
# *** To enable presence server execute:
#     - enable mysql
#     - define WITH_PRESENCE
#
# *** To enable nat traversal execute:
#     - define WITH_NAT
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
#
# *** To enable PSTN gateway routing execute:
#     - define WITH_PSTN
#     - set the value of pstn.gw_ip
#     - check route[PSTN] for regexp routing condition
#
# *** To enable database aliases lookup execute:
#     - enable mysql
#     - define WITH_ALIASDB
#
# *** To enable multi-domain support execute:
#     - enable mysql
#     - define WITH_MULTIDOMAIN
#
# *** To enable TLS support execute:
#     - adjust CFGDIR/tls.cfg as needed
#     - define WITH_TLS
#
# *** To enable XMLRPC support execute:
#     - define WITH_XMLRPC
#     - adjust route[XMLRPC] for access policy
#
# *** To enable anti-flood detection execute:
#     - adjust pike and htable=>ipban settings as needed (default is
#       block if more than 16 requests in 2 seconds and ban for 300 seconds)
#     - define WITH_ANTIFLOOD
#
# *** To enhance accounting execute:
#     - enable mysql
#     - define WITH_ACCDB
#     - add following columns to database

#!ifdef ACCDB_COMMENT
  ALTER TABLE acc ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE acc ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN src_domain VARCHAR(128) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_ouser VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_user VARCHAR(64) NOT NULL DEFAULT '';
  ALTER TABLE missed_calls ADD COLUMN dst_domain VARCHAR(128) NOT NULL DEFAULT '';
#!endif

################################### Defined Values ######################################
################################### Defined Values ######################################
################################### Defined Values ######################################

# *** Value defines - IDs used later in config
##!ifdef WITH_MYSQL
##!define DBURL "mysql://root:098098ZZZ@localhost/kamailio"
##!endif

#!ifdef WITH_POSTGRES
#!define DBURL "postgres://kamailio:kamailiorw@MY_DB/kamailio"
#!endif


#!ifdef WITH_MULTIDOMAIN
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif



################################### Global Parameters ###################################
################################### Global Parameters ###################################
################################### Global Parameters ###################################

#!ifdef WITH_DEBUG
debug=3
log_stderror=no
#!else
debug=2
log_stderror=yes
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL0

fork=yes
children=4

# uncomment the next line to disable TCP (default on)
#disable_tcp=yes

# uncomment the next line to disable the auto discovery of local aliases
#   based on reverse DNS on IPs (default on)
#auto_aliases=no

# add local domain aliases
alias=MY_DOMAIN

# uncomment and configure the following line if you want Kamailio to
#   bind on a specific interface/port/proto (default bind on all available)
listen=MY_UDP_ADDR
listen=MY_TCP_ADDR
listen=MY_TLS_ADDR
listen=MY_WS_ADDR
listen=MY_WSS_ADDR

#!ifdef WITH_MSRP
listen=MY_MSRP_ADDR
listen=MY_MSRPTCP_ADDR
#!endif

# port to listen to * - can be specified more than once if needed to listen on many ports
port=5060

#!ifdef WITH_TLS
enable_tls=yes
#!endif

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes
tcp_rd_buf_size=16384

####### Custom Parameters #########

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

#!ifdef WITH_PSTN
# PSTN GW Routing
#
# - pstn.gw_ip: valid IP or hostname as string value, example:
# pstn.gw_ip = "10.0.0.101" desc "My PSTN GW Address"
#
# - by default is empty to avoid misrouting
#pstn.gw_ip = "172.16.20.220"
pstn.gw_ip="MY_ASTERISK"
pstn.gw_port="5160"
#!endif

asterisk.bindip = "MY_ASTERISK" desc "Asterisk IP Address"
asterisk.bindport = "5160" desc "Asterisk Port"
kamailio.bindip = "MY_IP_ADDR" desc "Kamailio IP Address"
kamailio.bindport = "5060" desc "Kamailio Port"


#################################### Modules Section ####################################
#################################### Modules Section ####################################
#################################### Modules Section ####################################

# set paths to location of modules
#!ifdef LOCAL_TEST_RUN
mpath="modules_k:modules"
#!else
#mpath="/usr/lib64/kamailio/modules_k/:/usr/lib64/kamailio/modules/"
mpath="MODULES_LOCATION"
#!endif

#!ifdef WITH_MYSQL
#loadmodule "db_mysql.so"
#!endif

#!ifdef WITH_POSTGRES
loadmodule "db_postgres.so"
#!endif

loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "sdpops.so"
loadmodule "path.so"
loadmodule "uac.so"
loadmodule "ndb_redis.so"
loadmodule "msrp.so"
loadmodule "cfgutils.so"

#!ifdef WITH_WEBSOCKET
# webrtc
loadmodule "websocket.so"
loadmodule "xhttp.so"
#!endif

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "auth_ephemeral.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ALIASDB
loadmodule "alias_db.so"
#!endif

#!ifdef WITH_MULTIDOMAIN
loadmodule "domain.so"
#!endif

#!ifdef WITH_PRESENCE
loadmodule "presence.so"
#loadmodule "presence_xml.so"
#loadmodule "xcap_client.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

#!ifdef WITH_XCAPSRV
loadmodule "xcap_server.so"
#!endif


######################## setting module-specific parameters ###########################
######################## setting module-specific parameters ###########################
######################## setting module-specific parameters ###########################

# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")


# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)


# ----- rr params -----
# add value to ;lr param to cope with most of the UAs
modparam("rr", "enable_full_lr", 1)
# do not append from tag to the RR (no need for this script)
#modparam("rr", "append_fromtag", 0)
modparam("rr", "append_fromtag", 1)


# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)
# max value for expires of registrations
modparam("registrar", "min_expires", 120)
modparam("registrar", "max_expires", 180)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "use_path", 1)
modparam("registrar", "path_mode", 1)
modparam("registrar", "path_use_received", 1)
modparam("registrar", "path_check_local", 1)


# ----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting */
#!ifdef WITH_ACCDB
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
#!endif


# ----- usrloc params -----
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 1)
#modparam("usrloc", "use_domain", MULTIDOMAIN)
#!endif


# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "user_column", "username")
#modparam("auth_db", "password_column", "kamailiopass")
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
#modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- auth_ephemeral params -----
modparam("auth_ephemeral", "secret", "SECRET_KEY")

# ----- permissions params -----
#!ifdef WITH_IPAUTH
modparam("permissions", "db_url", DBURL)
modparam("permissions", "db_mode", 1)
#!endif

#!endif


# ----- alias_db params -----
#!ifdef WITH_ALIASDB
modparam("alias_db", "db_url", DBURL)
modparam("alias_db", "use_domain", MULTIDOMAIN)
#!endif


# ----- domain params -----
#!ifdef WITH_MULTIDOMAIN
modparam("domain", "db_url", DBURL)
# use caching
modparam("domain", "db_mode", 1)
# register callback to match myself condition with domains list
modparam("domain", "register_myself", 1)
#!endif


#!ifdef WITH_PRESENCE
# ----- presence params -----
modparam("presence", "db_url", DBURL)
#modparam("presence", "fallback2db", 1)
#modparam("presence", "db_update_period", 20)
#modparam("presence", "presentity_table", "presentity")

# ----- presence_xml params -----
#modparam("presence_xml", "db_url", DBURL)
#modparam("presence_xml", "force_active", 0)
#modparam("presence_xml", "integrated_xcap_server", 1)
#!endif

#!ifdef WITH_XCAPSRV
# ----- xcap_server params -----
#modparam("xcap_server", "db_url", DBURL)
#modparam("xcap_client", "db_url", DBURL)
#!endif


#!ifdef WITH_NAT
# ----- rtpproxy params -----
# modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7722")
#modparam("rtpproxy", "rtpproxy_sock", "unix:/var/run/rtpproxy/rtpproxy.sock")
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:ping@kamailio-fts.example.com")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif


#!ifdef WITH_TLS
# ----- tls params -----
modparam("tls", "private_key", "PKEY_LOCATION")
modparam("tls", "certificate", "CERT_LOCATION")
modparam("tls", "ca_list", "CA_LOCATION")

#modparam("tls", "config", "/etc/kamailio/tls.cfg")
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
# ip ban htable with autoexpire after 5 minutes
modparam("htable", "htable", "ipban=>size=8;autoexpire=600;")
#modparam("htable", "htable", DBURL)
#!endif

#!ifdef WITH_XMLRPC
# ----- xmlrpc params -----
modparam("xmlrpc", "route", "XMLRPC");
modparam("xmlrpc", "url_match", "^/RPC")
#!endif

#!ifdef WITH_MSRP
# ----- htable params -----
modparam("htable", "htable", "msrp=>size=8;autoexpire=MSRP_MAX_EXPIRES;")
modparam("msrp", "use_path_addr", "172.16.20.14:6060")


#!endif

# REDIS
#modparam("ndb_redis", "server", "name=srvN;addr=127.0.0.1;port=6379;db=1")
#modparam("ndb_redis", "init_without_redis", 1)
modparam("ndb_redis", "server", "name=srvN;addr=127.0.0.1;port=6379")

#################################### Routing Logic ####################################
#################################### Routing Logic ####################################
#################################### Routing Logic ####################################
request_route {

#	xlog("L_INFO", "$ci New request - Method==> $rm o Response ==> $rs RURI==> $ru du==>$du rU==>$rU\n");
xlog("L_INFO", "Request - Method=> $rm From Username=> $fU hacia RURI=> $ru du=>$du rU=>$rU\n");

	if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT) && !(proto == WS || proto == WSS))) {
                xlog("L_WARN", "SIP request received on $Rp\n");
                sl_send_reply("403", "Forbidden");
                exit;
        }

	# per request initial checks
  route(REQINIT);

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	if (!is_method("REGISTER|INVITE|ACK|BYE|CANCEL|PRACK|MESSAGE|INFO|UPDATE|SUBSCRIBE|PUBLISH")) {
		sl_send_reply("405", "Method not allowed");
		exit;
	}

	# authentication
	route(AUTH);

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE|MESSAGE")) {
    $avp(uri) = $(fu{s.select,2,:});
    uac_replace_from("", "sip:$avp(uri)");
#		record_route_preset("MY_IP_ADDR:5060;nat=yes");
		record_route();
  }

	#dispatch requests to foreign domains
	#route(SIPOUT);

	#!ifdef WITH_PRESENCE
    # handle presence related requests


    route(PRESENCE);
    #!endif

	# handle registrations
	route(REGISTRAR);

#	if ($rU==$null) {
		# request with no Username in RURI
#		sl_send_reply("484","Address Incomplete");
#		exit;
#	}

    # dispatch destinations to PSTN

    route(ASTERISK);

	if (!is_method("INVITE|MESSAGE")) {
		route(RELAY);
		exit;
	}


	route(LOCATION);

	route(RELAY);
}




#################################### RUTAS ####################################
#################################### RUTAS ####################################
#################################### RUTAS ####################################

route[SETUP_BY_TRANSPORT] {

	if ($ru =~ "transport=ws") {
		xlog("L_INFO", "Request going to WS");

		if ($du == "") {
        	handle_ruri_alias();
			xlog("L_INFO", "du luego del handle_ruri_alias => $du y rc => $rc");
        		switch ($rc) {
        			case -1:
            				xlog("L_ERR", "Failed to handle alias of R-URI $ru\n");
					send_reply("400", "Bad request");
            				exit;
        			case 1:
            				xlog("L_INFO", "Routing in-dialog $rm from $fu to $du\n");
            				break;
        				case 2:
            				xlog("L_INFO", "Routing in-dialog $rm from $fu to $ru\n");
            				break;
         		}
    	}
		if(sdp_with_transport("RTP/SAVPF")) {
#			sdp_remove_media("video");
            rtpengine_manage("trust-address replace-origin replace-session-connection ICE=force");
            t_on_reply("REPLY_WS_TO_WS");
            return;
            }
 #       sdp_remove_media("video");
 		xlog("L_INFO", "hola mundo 2 2 2");
		rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-offer transport-protocol=UDP/TLS/RTP/SAVPF ICE=force SDES-no");
		t_on_reply("REPLY_FROM_WS");
	}
	else if ($proto =~ "ws") {
		xlog("L_INFO", "Request coming from WS");
#		sdp_remove_media("video");
		rtpengine_manage("trust-address replace-origin replace-session-connection ICE=remove RTP/AVP");
		t_on_reply("REPLY_TO_WS");
	}
	else {
		xlog("L_INFO", "This is a classic phone call");
		rtpengine_manage("replace-origin replace-session-connection");
		t_on_reply("MANAGE_CLASSIC_REPLY");
	}
}


route[RELAY] {
	if (is_method("INVITE")) {
		route(SETUP_BY_TRANSPORT);
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	if (is_method("BYE")) {
		route(SETUP_BY_TRANSPORT);
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if ( is_method("UPDATE") ) {
		# ACK is forwarded statelessy
		sl_send_reply("200","OK");
		exit;
	}

#	if (is_method("MESSAGE")){
#		xlog("L_INFO","es un mensaje y estoy por enviarlo");
#		}
#	if(redis_cmd("srvN", "HMGET usuario:2001 status", "res")) {
#    	xlog("L_INFO","array size: $redis(res=>size) - type: $redis(res=>type) - value: $redis(res=>value[0])\n");
#		}


	if (!t_relay()) {
		sl_reply_error();
	}

	exit;
}


# Routing to foreign domains
route[SIPOUT] {
        if (uri==myself) return;

        append_hf("P-hint: outbound\r\n");
        route(RELAY);
        exit;
}

# Per SIP request initial checks
route[REQINIT] {
#!ifdef WITH_ANTIFLOOD
	# flood dection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
      sl_send_reply("403", "Forbidden");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si)=1;
			exit;
		}
	}
#!endif

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7")) {
		xlog("L_INFO","Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		xlog("L_INFO", "has to tag :P \n");
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			if ($du == "") {
                            if (!handle_ruri_alias()) {
                                       xlog("L_ERR", "Bad alias <$ru>\n");
                                       sl_send_reply("400", "Bad Request");
                                       exit;
                               }
            	}

			if ( is_method("ACK") ) {
				# ACK is forwarded statelessy
				route(NATMANAGE);
			}
			route(RELAY);
		}
		else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# no loose-route, but stateful ACK;
					# must be an ACK after a 487
					# or e.g. 404 from upstream server
					route(RELAY);
					exit;
					}
				else {
					# ACK without matching transaction ... ignore and discard
					exit;
					}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Handle SIP registrations
route[REGISTRAR] {
	if (is_method("REGISTER")) {
		if(isflagset(FLT_NATS)) {
			setbflag(FLB_NATB);
			# uncomment next line to do SIP NAT pinging
			setbflag(FLB_NATSIPPING);
		}
#register local
		if (!save("location"))
			sl_reply_error();
#register en Asterisk

		if ($au=~"[1-9][0-9][0-9][0-9]$"){
			xlog("L_INFO","registro hacia el Asterisk");
			route(REGFWD);
			}
#		xlog("L_INFO","no es para el el Asterisk");
		exit;
	}
}

# USER location service
route[LOCATION] {
	xlog("L_INFO","ando por LOCATION");
	if (!lookup("location")) {
		$var(rc) = $rc;
		t_newtran();
		switch ($var(rc)) {
			case -1:
			case -3:
				send_reply("404", "Not Found");
				exit;
			case -2:
				send_reply("405", "Method Not Allowed");
				exit;
		}
	}

	route(RELAY);
	exit;
}


# Authentication route
route[AUTH] {
#!ifdef WITH_AUTH
	if(is_method("INVITE") && src_ip==MY_ASTERISK)
    	{
        xlog("L_INFO","the caller is from asterisk QUEUES\n");
	      return;
    	}

	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!autheph_check("$fd")) {
			auth_challenge("$fd", "0");
      $avp(uri) = $(fu{s.select,2,:});
      uac_replace_from("", "$avp(uri)");
      save("location","0x04","sip:$avp(uri)");
      exit;
		}
	# user authenticated - remove auth header
	if(!is_method("REGISTER|PUBLISH"))
		consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
		}

#!endif
	return;
}

# Caller NAT detection route
route[NATDETECT] {
	force_rport();
#	if (nat_uac_test("64")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
			if ($proto =~ "ws")
				set_contact_alias();
		}
		else {
			fix_nated_contact();
			if ($proto =~ "ws")
				set_contact_alias();
		}
		setflag(FLT_NATS);
#	}
return;
}

# RTPProxy control
route[NATMANAGE] {
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}


	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB)))
		return;

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			add_contact_alias();
		}
	}
}

# PSTN GW routing
route[ASTERISK] {
#!ifdef WITH_PSTN
	# check if PSTN GW IP is defined
	if (strempty($sel(cfg_get.pstn.gw_ip))) {
		xlog("SCRIPT: PSTN rotuing enabled but pstn.gw_ip not defined\n");
		return;
	}
	# route to PSTN dialed numbers starting with '+' or '00'
	#     (international format)
	# - update the condition to match your dialing rules for PSTN routing

	if(!($rU=~"[A][G][E][N][T]$" || $rU=~"[C][A][M][P]$" ||$rU=~"[0][0][0][1][0-9][0-9]$" ||$rU=~"[0][0][0][0][1-9]{1,4}$"||$rU=~"[9][9][9][9][1-9]{1,4}$"|| $rU=~"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$"
	|| $rU=~"[3-8][0-9][0-9][0-9][0-9][0-9][0-9]$" || $rU=~"[1][5][2-8][0-9][0-9][0-9][0-9][0-9][0-9]$" || $rU=~"[0][0][7][7][A-Z]{3,20}$" || $rU=~"[0][0][7][7][0-9]$" || $rU=~"[0][0][7][7][0-9][0-9]$"))
	return;

	# only local users allowed to call
	if(from_uri!=myself) {
		sl_send_reply("403", "Not Allowed");
		exit;
	}
	if (strempty($sel(cfg_get.pstn.gw_port))) {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip);
	}
	else {
		$ru = "sip:" + $rU + "@" + $sel(cfg_get.pstn.gw_ip) + ":"
					+ $sel(cfg_get.pstn.gw_port);
	}

	route(RELAY);
	exit;
#!endif

	return;
}

route[REGFWD] {
#		xlog("L_INFO","Vo sos de la B");
        if(!is_method("REGISTER"))
        {
        		xlog("L_INFO","Error de registro hacia el Asterisk");
                return;
        }
        $var(rip) = $sel(cfg_get.asterisk.bindip);
        $uac_req(method)="REGISTER";
        $uac_req(ruri)="sip:" + $var(rip) + ":" + $sel(cfg_get.asterisk.bindport);
        $uac_req(furi)="sip:" + $au + "@" + $var(rip);
        $uac_req(turi)="sip:" + $au + "@" + $var(rip);
        $uac_req(hdrs)="Contact: <sip:" + $au + "@" + $sel(cfg_get.kamailio.bindip)
                                + ":" + $sel(cfg_get.kamailio.bindport) + ">\r\n";
        if($sel(contact.expires) != $null)
                $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $sel(contact.expires) + "\r\n";
        else
                $uac_req(hdrs)= $uac_req(hdrs) + "Expires: " + $hdr(Expires) + "\r\n";
        uac_req_send();
}


# URI update for dialog requests
route[DLGURI] {
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
	return;
}


# manage failure routing cases
failure_route[MANAGE_FAILURE] {
	route(NATMANAGE);
	if (t_is_canceled()) {
		exit;
	}
}

route[PRESENCE] {
        if(!is_method("PUBLISH|SUBSCRIBE"))
                return;

        if(is_method("SUBSCRIBE") && $hdr(Event)=="message-summary") {
#                route(TOVOICEMAIL);
                # returns here if no voicemail server is configured
                sl_send_reply("404", "No voicemail service");
                exit;
        }

#!ifdef WITH_PRESENCE
        if (!t_newtran())
        {
                sl_reply_error();
                exit;
        }

        if(is_method("PUBLISH"))
        {
                handle_publish();
                t_release();
        } else if(is_method("SUBSCRIBE")) {
                handle_subscribe();
                t_release();
        }
        exit;
#!endif

        # if presence enabled, this part will not be executed
        if (is_method("PUBLISH") || $rU==$null)
        {
                xlog("@ 404 here 3");
                sl_send_reply("404", "Not here");
                exit;
        }
        return;
}

onreply_route[REPLY_TO_WS] {
	xlog("L_INFO", "Reply TO WS: $rs");
#	if (t_check_status("183")) {
#		change_reply_status(180, "Ringing");
#		remove_body();
#		exit;
#	}
	if(!(status=~"[12][0-9][0-9]"))
		return;
	rtpengine_manage("force trust-address replace-origin replace-session-connection ICE=force RTP/SAVPF");
#	sdp_remove_media("video");
	route(NATMANAGE);
}

onreply_route[REPLY_FROM_WS] {
	# el set_contact_alias me ayuda a setear el contact para que asterisk me siga solicitando al "ALIAS"
	set_contact_alias();
	xlog("L_INFO", "Reply from webrtc client: $rs");
	if(status=~"[12][0-9][0-9]") {
		rtpengine_manage("force trust-address replace-origin replace-session-connection ICE=remove RTP/AVP ");
		route(NATMANAGE);
	}
}

onreply_route[MANAGE_CLASSIC_REPLY] {
	xlog("L_INFO", "Boring reply from softphone: $rs");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

onreply_route[REPLY_WS_TO_WS] {
        xlog("L_INFO", "WS to WS");
        if(status=~"[12][0-9][0-9]") {
        route(NATMANAGE);
        }
}




event_route[xhttp:request] {
        set_reply_close();
        set_reply_no_connect();

        xlog("L_INFO","voy por event_route xhttp");
        if ($Rp != MY_WS_PORT
#!ifdef WITH_TLS
            && $Rp != MY_WSS_PORT
#!endif
        ) {
                xlog("L_WARN", "HTTP request received on $Rp\n");
                xhttp_reply("403", "Forbidden", "", "");
                exit;
        }

        #xlog("L_INFO", "HTTP Request Received - $hdr(Upgrade) - $hdr(Connection) - $rm - $hdr(From) \n");
        if ($hdr(Upgrade)=~"websocket"
                        && $hdr(Connection)=~"Upgrade"
                        && $rm=~"GET") {

                # Validate Host - make sure the client is using the correct
                # alias for WebSockets
                if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
                        xlog("L_WARN", "Bad host $hdr(Host)\n");
                        xhttp_reply("403", "Forbidden", "", "");
                        exit;
                }

                if (ws_handle_handshake())
                {
                        # Optional... cache some information about the
                        # successful connection
                        exit;
                }
        }

        xhttp_reply("404", "Not Found", "", "");
}


#!ifdef WITH_MSRP
event_route[msrp:frame-in] {
	msrp_reply_flags("1");

	xlog("L_INFO", "MSRP request received !!! \n");

	xlog("L_INFO","============#[[$msrp(method)]]===========\n");
	xlog("L_INFO","============*[[$si:$sp]]\n");
	xlog("L_INFO","============ crthop:   [$msrp(crthop)]\n");
	xlog("L_INFO","============ prevhop:  [$msrp(prevhop)]\n");
	xlog("L_INFO","============ nexthop:  [$msrp(nexthop)]\n");
	xlog("L_INFO","============ firsthop: [$msrp(firsthop)]\n");
	xlog("L_INFO","============ lasthop:  [$msrp(lasthop)]\n");
	xlog("L_INFO","============ prevhops: [$msrp(prevhops)]\n");
	xlog("L_INFO","============ nexthops: [$msrp(nexthops)]\n");
	xlog("L_INFO","============ srcaddr:  [$msrp(srcaddr)]\n");
	xlog("L_INFO","============ srcsock:  [$msrp(srcsock)]\n");
	xlog("L_INFO","============ sessid:   [$msrp(sessid)]\n");
	xlog("L_INFO","============ body:   [$msrp(body)]\n");

	if ((($Rp == MY_WS_PORT || $Rp == MY_WSS_PORT)
		&& !(proto == WS || proto == WSS)) && $Rp != MY_MSRP_PORT) {
		xlog("L_INFO", "MSRP request received on $Rp\n");
		msrp_reply("403", "Action-not-allowed");
		exit;
	}

	if (msrp_is_reply()) {
		xlog("L_INFO","============ sessid:   [$msrp(sessid)]\n");
		msrp_relay();
		}
	else if($msrp(method)=="AUTH") {
		if($msrp(nexthops)>0) {
			msrp_relay();
			exit;
			}

		if (!www_authenticate("MY_DOMAIN", "subscriber", "$msrp(method)")) {
			if (auth_get_www_authenticate("MY_DOMAIN", "1", "$var(wauth)")) {
			#	msrp_reply("401", "Unauthorized", "$var(wauth)");
				xlog("L_INFO","caca nene caca \n");
				}
			else {
				xlog("L_WARN", "Problema de AUTH !!! \n");
				msrp_reply("500", "Server Error");
				}
#			exit;
			}

		if ($hdr(Expires) != $null) {
			$var(expires) = (int) $hdr(Expires);
			if ($var(expires) < MSRP_MIN_EXPIRES) {
				msrp_reply("423", "Interval Out-of-Bounds",
					"Min-Expires: MSRP_MIN_EXPIRES\r\n");
				exit;
			} else if ($var(expires) > MSRP_MAX_EXPIRES) {
				msrp_reply("423", "Interval Out-of-Bounds",
					"Max-Expires: MSRP_MAX_EXPIRES\r\n");
				exit;
			}
		} else {
			$var(expires) = MSRP_MAX_EXPIRES;
		}

		$var(cnt) = $var(cnt) + 1;
		pv_printf("$var(sessid)", "s.$(pp).$(var(cnt)).$(RANDOM)");
		$sht(msrp=>$var(sessid)::srcaddr) = $msrp(srcaddr);
		$sht(msrp=>$var(sessid)::srcsock) = $msrp(srcsock);
		$shtex(msrp=>$var(sessid)) = $var(expires) + 5;
		# - Use-Path: the MSRP address for server + session id
		$var(hdrs) = "Use-Path: msrps://MY_IP_ADDR:MY_MSRP_PORT/"
					+ $var(sessid) + ";tcp\r\n"
					+ "Expires: " + $var(expires) + "\r\n";
		msrp_reply("200", "OK", "$var(hdrs)");
	} else if ($msrp(method)=="SEND" || $msrp(method)=="REPORT") {
		if ($msrp(nexthops)>1) {
			if ($msrp(method)!="REPORT") {
				msrp_reply("200", "OK");
			}
			msrp_relay();
			exit;
		}
		$var(sessid) = $msrp(sessid);
		if ($sht(msrp=>$var(sessid)::srcaddr) == $null) {
			# one more hop, but we don't have address in htable
			msrp_reply("481", "Session-does-not-exist");
			exit;
		} else if ($msrp(method)!="REPORT") {
			msrp_reply("200", "OK");
		}
		msrp_relay_flags("1");
		msrp_set_dst("$sht(msrp=>$var(sessid)::srcaddr)",
				"$sht(msrp=>$var(sessid)::srcsock)");
		msrp_relay();
	} else {
		msrp_reply("501", "Request-method-not-understood");
	}
}
#!endif
